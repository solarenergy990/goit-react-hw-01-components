{"version":3,"sources":["components/Profile/Profile.module.css","components/Statistics/Statistics.module.css","components/FriendList/FriendList.module.css","components/TransactionHistory/TransactionHistory.module.css","components/Profile/Profile.js","components/Statistics/Statistics.js","components/FriendList/FriendList.js","components/TransactionHistory/TransactionHistory.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Profile","name","tag","location","avatar","stats","className","s","profile","description","src","alt","statsItem","label","quantity","followers","views","likes","getRandom","min","max","Math","ceil","random","Statistics","title","statistics","toUpperCase","statList","map","stat","item","style","backgroundColor","percentage","id","FriendList","friends","friendList","friend","isOnline","online","offline","width","TransactionHistory","items","transactionHistory","type","amount","currency","App","user","statisticalData","transactions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f16916b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3ELHe\",\"avatar\":\"Profile_avatar__2gjME\",\"description\":\"Profile_description__361Hd\",\"name\":\"Profile_name__3c0Ou\",\"stats\":\"Profile_stats__2lDmj\",\"statsItem\":\"Profile_statsItem__1JUrh\",\"label\":\"Profile_label__2SNVb\",\"quantity\":\"Profile_quantity__1wssR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics\":\"Statistics_statistics__jG96p\",\"title\":\"Statistics_title__2GrVv\",\"statList\":\"Statistics_statList__Zm3Qq\",\"item\":\"Statistics_item__1Z_Uz\",\"label\":\"Statistics_label__pmUxH\",\"percentage\":\"Statistics_percentage__27rLT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendList\":\"FriendList_friendList__2t3Nx\",\"item\":\"FriendList_item__3kaTL\",\"status\":\"FriendList_status__2uTpa\",\"online\":\"FriendList_online__2nXkk FriendList_status__2uTpa\",\"offline\":\"FriendList_offline__18n6Z FriendList_status__2uTpa\",\"avatar\":\"FriendList_avatar__xswEr\",\"name\":\"FriendList_name__3tIOZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transactionHistory\":\"TransactionHistory_transactionHistory__2rmmM\"};","import s from \"./Profile.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst Profile = ({ name, tag, location, avatar, stats }) => {\n  return (\n    <div className={s.profile}>\n      <div className={s.description}>\n        <img src={avatar} alt=\"Аватар пользователя\" className={s.avatar} />\n        <p className={s.name}>{name}</p>\n        <p className=\"tag\">@{tag}</p>\n        <p className=\"location\">{location}</p>\n      </div>\n\n      <ul className={s.stats}>\n        <li className={s.statsItem}>\n          <span className={s.label}>Followers</span>\n          <span className={s.quantity}>{stats.followers}</span>\n        </li>\n        <li className={s.statsItem}>\n          <span className={s.label}>Views</span>\n          <span className={s.quantity}>{stats.views}</span>\n        </li>\n        <li className={s.statsItem}>\n          <span className={s.label}>Likes</span>\n          <span className={s.quantity}>{stats.likes}</span>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nProfile.propTypes = {\n  name: PropTypes.string.isRequired,\n  tag: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  avatar: PropTypes.string.isRequired,\n  stats: PropTypes.object.isRequired,\n};\n\nexport default Profile;\n","import s from \"./Statistics.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({ title, stats }) => {\n  return (\n    <section className={s.statistics}>\n      <h2 className={s.title}>{title.toUpperCase()}</h2>\n\n      <ul className={s.statList}>\n        {stats.map((stat) => (\n          <li\n            className={s.item}\n            key={stat.id}\n            style={{\n              backgroundColor: `rgb(${getRandom(0, 255)}, ${getRandom(\n                0,\n                255\n              )}, ${getRandom(0, 255)})`,\n            }}\n          >\n            <span className={s.label}>{stat.label}</span>\n            <span className={s.percentage}>{stat.percentage}</span>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nconst getRandom = (min, max) => {\n  return Math.ceil(Math.random() * (max - min) + min);\n};\n\nStatistics.propTypes = {\n  title: PropTypes.string.isRequired,\n  stats: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n      percentage: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default Statistics;\n","import s from \"./FriendList.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst FriendList = ({ friends }) => {\n  return (\n    <ul className={s.friendList}>\n      {friends.map((friend) => (\n        <li className={s.item} key={friend.id}>\n          <span className={friend.isOnline ? s.online : s.offline}></span>\n          <img\n            className={s.avatar}\n            src={friend.avatar}\n            alt={friend.name}\n            width=\"48\"\n          />\n          <p className={s.name}>{friend.name}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nFriendList.propTypes = {\n  friends: PropTypes.arrayOf(\n    PropTypes.shape({\n      avatar: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      isOnline: PropTypes.bool.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default FriendList;\n","import s from \"./TransactionHistory.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst TransactionHistory = ({ items }) => {\n  return (\n    <table className={s.transactionHistory}>\n      <thead>\n        <tr>\n          <th>Type</th>\n          <th>Amount</th>\n          <th>Currency</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {items.map((item) => (\n          <tr key={item.id}>\n            <td>{item.type}</td>\n            <td>{item.amount}</td>\n            <td>{item.currency}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nTransactionHistory.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      amount: PropTypes.string.isRequired,\n      currency: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default TransactionHistory;\n","// import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Profile from \"./components/Profile/Profile\";\nimport user from \"./components/Profile/user.json\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport statisticalData from \"./components/Statistics/statistical-data.json\";\nimport FriendList from \"./components/FriendList/FriendList\";\nimport friends from \"./components/FriendList/friends.json\";\nimport TransactionHistory from \"./components/TransactionHistory/TransactionHistory\";\nimport transactions from \"./components/TransactionHistory/transactions.json\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Profile\n        name={user.name}\n        tag={user.tag}\n        location={user.location}\n        avatar={user.avatar}\n        stats={user.stats}\n      />\n      <Statistics title=\"Upload stats\" stats={statisticalData} />\n      <FriendList friends={friends} />\n      <TransactionHistory items={transactions} />;\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}